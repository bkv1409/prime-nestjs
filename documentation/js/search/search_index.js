var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.384,1,2.16]],["body/controllers/AppController.html",[0,1.572,1,2.453,2,0.993,3,0.278,4,0.247,5,0.217,6,2.149,7,0.581,8,1.453,9,3.749,10,4.096,11,3.749,12,4.096,13,2.561,14,4.301,15,3.467,16,2.629,17,0.029,18,3.749,19,1.625,20,2.561,21,1.572,22,1.346,23,1.453,24,3.81,25,1.892,26,3.146,27,2.561,28,1.892,29,2.561,30,3.749,31,2.561,32,2.561,33,2.561,34,3.749,35,3.146,36,2.561,37,0.608,38,2.561,39,0.415,40,2.388,41,2.149,42,2.014,43,2.561,44,1.676,45,2.561,46,2.561,47,2.453,48,2.561,49,1.676,50,2.561,51,1.514,52,2.561,53,0.278,54,0.16,55,1.379,56,1.379,57,1.379,58,1.572,59,2.561,60,2.561,61,2.561,62,3.749,63,2.561,64,2.561,65,2.561,66,2.561,67,0.016,68,0.016]],["title/modules/AppModule.html",[69,0.944,70,2.16]],["body/modules/AppModule.html",[1,2.938,2,1.477,3,0.284,4,0.252,5,0.222,17,0.029,37,0.666,39,0.425,40,2.945,41,2.197,53,0.284,54,0.164,67,0.017,68,0.017,69,1.09,70,4.142,71,1.015,72,1.597,73,2.197,74,2.197,75,2.197,76,3.233,77,3.233,78,3.233,79,3.233,80,2.945,81,1.88,82,1.292,83,1.097,84,2.617,85,2.051,86,2.654,87,2.617,88,2.617,89,1.919,90,2.617,91,2.617,92,2.617,93,1.919,94,1.547,95,3.197,96,4.139,97,1.919,98,2.617,99,2.617,100,3.197,101,2.197,102,2.617,103,2.617,104,1.547,105,2.617,106,2.617,107,2.197,108,2.617,109,2.197,110,2.617]],["title/injectables/AppService.html",[40,1.778,111,0.691]],["body/injectables/AppService.html",[3,0.413,4,0.367,5,0.323,7,0.865,8,1.912,10,4.854,12,4.854,14,2.794,15,2.252,17,0.029,19,1.642,24,2.794,25,1.912,28,2.242,37,0.413,39,0.618,40,2.656,53,0.413,54,0.239,58,2.068,67,0.022,68,0.022,111,1.033,112,1.597,113,3.197,114,3.81,115,3.81,116,4.932,117,4.139,118,3.81,119,3.81,120,3.81]],["title/controllers/AuthController.html",[0,1.384,121,2.16]],["body/controllers/AuthController.html",[0,1.259,2,1.164,3,0.326,4,0.289,5,0.254,7,0.682,8,1.629,14,4.468,15,3.602,16,2.263,17,0.029,19,1.398,21,1.761,22,1.509,23,1.629,24,4.051,25,1.629,37,0.526,39,0.487,42,2.201,53,0.326,54,0.188,55,1.617,57,1.617,67,0.018,68,0.018,121,2.749,122,2.52,123,2.202,124,4.846,125,3.745,126,3.526,127,3.526,128,3.003,129,4.201,130,3.003,131,3.003,132,4.201,133,3.003,134,2.52,135,1.908,136,2.202,137,2.202,138,3.003,139,2.202,140,3.003,141,2.484,142,2.749,143,3.003,144,3.003,145,3.003,146,3.003,147,3.003]],["title/modules/AuthModule.html",[69,0.944,76,1.951]],["body/modules/AuthModule.html",[2,1.45,3,0.277,4,0.246,5,0.216,17,0.029,37,0.655,39,0.414,42,2.774,53,0.277,54,0.16,67,0.016,68,0.016,69,1.07,71,0.99,72,1.568,76,3.646,80,2.92,81,1.846,82,1.26,83,1.07,85,2.015,86,2.617,93,1.873,94,1.509,95,3.139,96,4.09,97,1.873,107,2.143,109,2.143,121,2.896,137,1.873,148,2.143,149,2.143,150,2.143,151,2.143,152,2.92,153,3.205,154,2.553,155,2.448,156,3.741,157,1.873,158,3.741,159,1.671,160,2.553,161,2.553,162,2.553,163,1.45,164,2.143,165,2.143,166,2.553,167,2.553,168,1.509,169,2.553,170,2.143,171,1.671,172,2.553,173,2.143,174,2.553,175,2.143,176,2.553,177,2.553,178,2.553,179,2.553,180,2.553,181,2.143,182,2.143]],["title/injectables/AuthService.html",[42,1.499,111,0.691]],["body/injectables/AuthService.html",[3,0.166,4,0.148,5,0.13,7,0.348,8,0.975,15,1.89,17,0.03,19,1.064,21,1.34,22,1.148,23,1.239,25,0.975,35,2.11,37,0.503,39,0.249,42,1.142,53,0.166,54,0.232,56,0.826,57,1.722,58,2.028,67,0.011,68,0.011,104,1.486,111,0.527,112,0.643,117,1.286,125,2.871,126,2.11,127,2.11,135,1.68,136,1.124,139,2.345,141,2.187,142,2.42,157,1.124,163,1.583,168,0.906,171,2.092,183,1.286,184,1.354,185,1.286,186,1.826,187,4.634,188,1.533,189,0.987,190,1.89,191,2.514,192,1.533,193,2.713,194,2.514,195,1.533,196,2.11,197,1.89,198,1.124,199,1.286,200,3.427,201,2.345,202,1.286,203,1.722,204,1.533,205,2.514,206,2.514,207,4.838,208,2.514,209,3.699,210,2.514,211,2.514,212,2.683,213,2.514,214,1.286,215,1.533,216,1.533,217,1.533,218,1.533,219,2.514,220,2.514,221,1.286,222,2.514,223,2.11,224,2.514,225,2.514,226,2.11,227,2.514,228,1.286,229,2.514,230,1.533,231,2.514,232,1.533,233,4.634,234,2.514,235,5.156,236,3.699,237,2.514,238,1.533,239,2.092,240,2.514,241,1.533,242,2.514,243,1.533,244,1.533,245,1.286,246,1.286,247,1.533,248,2.092,249,1.533,250,1.533,251,3.197,252,1.533,253,1.533,254,1.533,255,1.533,256,1.533,257,1.003,258,1.533,259,1.533,260,1.533,261,3.699,262,1.533,263,1.533,264,1.533]],["title/controllers/ContractsController.html",[0,1.384,265,2.16]],["body/controllers/ContractsController.html",[0,1.953,2,1.806,3,0.506,4,0.449,5,0.395,17,0.028,37,0.506,39,0.756,53,0.506,54,0.292,67,0.025,68,0.025,123,3.417,265,3.659,266,3.91,267,4.659,268,4.659]],["title/modules/ContractsModule.html",[69,0.944,77,1.951]],["body/modules/ContractsModule.html",[2,1.953,3,0.427,4,0.379,5,0.334,17,0.029,37,0.603,39,0.638,53,0.427,54,0.247,67,0.022,68,0.022,69,1.441,71,1.526,72,2.111,77,3.66,81,2.486,82,1.942,83,1.65,85,2.712,265,3.634,269,3.303,270,3.303,271,3.66,272,3.935,273,3.935,274,3.935]],["title/injectables/ContractsService.html",[111,0.691,271,1.951]],["body/injectables/ContractsService.html",[3,0.511,4,0.454,5,0.399,17,0.028,37,0.511,39,0.764,53,0.511,54,0.295,67,0.025,68,0.025,111,1.179,112,1.975,271,3.328,275,3.954]],["title/classes/CreateTaskDto.html",[54,0.207,276,1.778]],["body/classes/CreateTaskDto.html",[3,0.526,4,0.467,5,0.411,17,0.027,53,0.526,54,0.304,67,0.025,68,0.025,276,3.084,277,3.172,278,4.069,279,3.556]],["title/modules/FilesModule.html",[69,0.944,78,1.951]],["body/modules/FilesModule.html",[3,0.511,4,0.454,5,0.399,17,0.028,37,0.511,39,0.764,53,0.511,54,0.295,67,0.025,68,0.025,69,1.611,71,1.827,78,3.328,280,4.712]],["title/injectables/JwtAuthGuard.html",[44,2.16,111,0.691]],["body/injectables/JwtAuthGuard.html",[3,0.57,4,0.291,5,0.255,7,0.684,8,1.633,17,0.029,19,1.616,21,1.766,22,1.512,23,1.633,25,1.633,37,0.457,39,0.489,44,2.756,53,0.327,54,0.189,58,1.766,67,0.019,68,0.019,104,1.781,111,0.882,112,1.263,159,1.972,163,2.144,170,2.529,184,2.615,189,0.93,190,1.781,203,1.623,281,4.412,282,2.529,283,3.535,284,4.212,285,3.013,286,3.535,287,4.412,288,3.013,289,2.529,290,4.212,291,3.013,292,4.855,293,4.855,294,3.013,295,1.972,296,3.013,297,2.529,298,3.013,299,3.013,300,3.013,301,3.535,302,3.013,303,3.013,304,3.013,305,3.013,306,3.013,307,3.013,308,3.013,309,3.013,310,3.535]],["title/injectables/JwtStrategy.html",[111,0.691,153,1.951]],["body/injectables/JwtStrategy.html",[3,0.283,4,0.252,5,0.221,7,0.592,8,1.473,17,0.029,19,1.265,21,1.593,22,1.365,23,1.473,25,1.473,28,1.473,37,0.593,39,0.423,42,2.481,53,0.283,54,0.163,55,1.405,56,1.405,57,1.405,58,1.879,67,0.017,68,0.017,111,0.796,112,1.094,125,2.933,135,2.236,136,1.913,137,1.913,139,3.287,141,1.542,142,1.707,153,2.247,159,1.707,163,2.352,164,2.19,168,2.247,171,1.707,181,2.19,184,1.405,189,1.173,193,2.787,200,4.133,203,1.405,221,2.19,246,3.189,295,1.707,297,2.19,310,3.189,311,2.19,312,2.609,313,2.609,314,3.8,315,2.609,316,3.189,317,3.8,318,2.609,319,2.609,320,2.19,321,2.609,322,2.609,323,2.609,324,2.609,325,2.609,326,2.609,327,2.609,328,2.609,329,2.609,330,2.19,331,2.609,332,2.19,333,2.609,334,2.609,335,2.19,336,2.609,337,2.609,338,3.8,339,2.609,340,2.609]],["title/modules/LoggerModule.html",[69,0.944,152,1.778]],["body/modules/LoggerModule.html",[2,1.438,3,0.402,4,0.358,5,0.314,17,0.029,37,0.526,39,0.601,53,0.402,54,0.232,67,0.021,68,0.021,69,1.387,71,1.438,72,2.032,81,2.392,82,1.83,83,1.555,85,2.61,86,2.865,152,3.507,155,3.171,186,3.214,341,3.112,342,3.112,343,3.112,344,3.708,345,3.708,346,3.708]],["title/injectables/LoggerService.html",[111,0.691,186,1.629]],["body/injectables/LoggerService.html",[3,0.487,4,0.432,5,0.38,17,0.028,37,0.487,39,0.727,53,0.487,54,0.281,67,0.024,68,0.024,111,1.145,112,1.88,186,2.697,190,3.484,295,3.575,347,3.763,348,5.464,349,4.484]],["title/guards/RolesGuard.html",[47,2.16,350,2.421]],["body/guards/RolesGuard.html",[3,0.35,4,0.311,5,0.273,7,0.731,8,1.71,17,0.029,19,1.468,21,1.849,22,1.584,23,1.71,25,1.249,37,0.587,39,0.523,47,2.887,51,1.905,53,0.35,54,0.202,55,1.736,58,1.849,67,0.019,68,0.019,104,1.905,111,0.924,141,2.608,163,1.249,184,1.736,189,1.362,190,1.905,283,4.54,286,3.703,287,4.54,289,2.705,351,3.222,352,2.705,353,3.222,354,5.851,355,3.222,356,3.222,357,3.703,358,2.705,359,2.363,360,3.222,361,3.222,362,3.222,363,4.412,364,3.222,365,3.222,366,3.222,367,3.222,368,3.222,369,3.222]],["title/controllers/TasksController.html",[0,1.384,370,2.16]],["body/controllers/TasksController.html",[0,1.042,2,0.963,3,0.27,4,0.24,5,0.211,7,0.564,8,1.422,15,2.168,16,2.763,17,0.029,19,1.708,21,2.017,22,1.727,23,1.865,25,1.989,28,2.256,37,0.522,39,0.403,53,0.27,54,0.156,55,1.338,56,1.338,58,2.151,67,0.016,68,0.016,123,1.822,134,3.657,189,1.485,276,2.892,332,2.086,370,2.399,371,2.086,372,2.086,373,2.399,374,3.528,375,2.689,376,2.689,377,3.077,378,2.086,379,2.485,380,2.485,381,2.086,382,3.667,383,2.485,384,3.513,385,1.822,386,3.667,387,2.485,388,2.086,389,3.369,390,3.667,391,2.485,392,2.485,393,2.485,394,2.347,395,2.086,396,1.822,397,2.689,398,2.086,399,2.485,400,2.485,401,2.485,402,2.485,403,2.485,404,2.485,405,2.485,406,2.485,407,2.485,408,2.485]],["title/modules/TasksModule.html",[69,0.944,79,1.951]],["body/modules/TasksModule.html",[2,1.806,3,0.379,4,0.337,5,0.296,17,0.029,37,0.607,39,0.566,53,0.379,54,0.219,67,0.02,68,0.02,69,1.333,71,1.354,72,1.952,79,3.719,81,2.299,82,1.723,83,1.464,85,2.508,86,2.753,152,3.227,155,3.047,165,2.93,370,3.429,394,3.475,395,2.93,409,2.93,410,3.492,411,2.93,412,2.93,413,3.492,414,3.492]],["title/injectables/TasksService.html",[111,0.691,394,1.778]],["body/injectables/TasksService.html",[3,0.222,4,0.197,5,0.173,7,0.463,8,1.225,16,2.083,17,0.029,19,1.833,21,1.974,22,1.691,23,1.826,25,2.221,26,3.246,28,1.826,37,0.511,39,0.331,53,0.222,54,0.128,55,1.1,56,1.1,58,2.088,67,0.014,68,0.014,89,1.498,111,0.662,112,0.856,184,1.1,185,1.714,186,2.149,189,1.453,190,2.286,202,1.714,203,1.702,257,2.068,276,2.536,372,2.653,373,2.068,374,3.193,375,2.318,376,2.318,377,2.653,378,2.653,381,2.653,384,3.258,385,2.318,388,2.653,389,3.07,394,1.702,396,1.498,397,2.318,398,1.714,415,1.714,416,4.354,417,4.354,418,4.354,419,2.042,420,2.042,421,2.042,422,4.04,423,2.042,424,3.161,425,2.042,426,3.161,427,2.042,428,3.161,429,2.042,430,2.042,431,2.042,432,2.042,433,2.042,434,2.042,435,2.042,436,2.042,437,3.867,438,2.042,439,2.042,440,3.161,441,2.042,442,2.042,443,4.179,444,2.042,445,4.354,446,2.042,447,2.042]],["title/classes/UpdateTaskDto.html",[54,0.207,389,1.951]],["body/classes/UpdateTaskDto.html",[3,0.487,4,0.432,5,0.38,17,0.028,37,0.593,53,0.487,54,0.281,67,0.024,68,0.024,276,2.415,277,2.934,279,3.289,295,2.934,373,2.934,389,3.23,397,3.289,448,3.763,449,4.484,450,3.763,451,3.763,452,4.484]],["title/entities/User.html",[163,1.28,453,2.16]],["body/entities/User.html",[3,0.319,4,0.283,5,0.249,7,0.667,16,3.062,17,0.029,19,1.892,22,1.72,28,2.204,37,0.449,49,3.134,51,3.24,53,0.319,54,0.184,67,0.018,68,0.018,104,2.447,163,1.605,189,1.803,239,3.134,248,3.134,357,3.473,384,3.134,422,3.035,453,2.708,454,2.156,455,2.467,456,2.447,457,4.79,458,6.063,459,2.939,460,4.79,461,2.939,462,2.939,463,2.939,464,2.939,465,2.939,466,2.939,467,5.2,468,3.513,469,2.939,470,2.939,471,2.939,472,1.923,473,2.939,474,2.939,475,2.939]],["title/classes/UsersDTO.html",[54,0.207,197,1.951]],["body/classes/UsersDTO.html",[3,0.39,4,0.347,5,0.305,7,0.816,16,2.865,17,0.029,19,1.77,22,1.91,23,1.842,28,2.342,37,0.39,53,0.39,54,0.298,67,0.021,68,0.021,189,1.641,197,2.808,198,4.149,201,2.638,239,3.48,248,3.48,277,2.353,456,2.808,476,3.019,477,3.597,478,3.597,479,3.597,480,3.597,481,3.597,482,3.597,483,4.75,484,5.318,485,4.75,486,5.318]],["title/modules/UsersModule.html",[69,0.944,80,1.778]],["body/modules/UsersModule.html",[3,0.401,4,0.356,5,0.313,17,0.029,37,0.62,39,0.599,53,0.401,54,0.231,67,0.021,68,0.021,69,1.383,71,1.431,72,2.026,80,3.339,81,2.385,82,1.822,83,1.548,85,2.603,86,2.183,93,2.708,94,2.183,135,2.955,155,3.162,163,1.431,182,3.099,487,3.099,488,3.099,489,3.099,490,3.692,491,3.692,492,3.099]],["title/injectables/UsersService.html",[111,0.691,135,1.499]],["body/injectables/UsersService.html",[3,0.27,4,0.24,5,0.211,7,0.564,8,1.422,17,0.029,19,1.708,21,2.017,22,1.727,23,1.865,25,1.865,28,2.082,37,0.557,39,0.403,53,0.398,54,0.156,56,1.338,57,1.338,58,1.827,67,0.016,68,0.016,94,1.469,111,0.768,112,1.042,125,3.513,135,1.665,141,1.469,142,1.626,163,1.989,184,1.338,189,1.583,193,4.18,197,2.844,199,2.086,203,1.338,212,2.086,214,2.086,248,2.399,373,2.399,374,3.528,375,2.689,376,2.689,384,1.626,385,2.689,396,1.822,453,1.626,472,1.626,492,2.086,493,2.086,494,2.485,495,4.811,496,2.485,497,3.667,498,3.667,499,2.485,500,2.485,501,2.485,502,3.667,503,2.485,504,2.485,505,2.485,506,2.485,507,2.485,508,2.485,509,2.485,510,2.485,511,2.485,512,2.485,513,2.485,514,2.485,515,2.485,516,2.485,517,2.485]],["title/coverage.html",[518,3.289]],["body/coverage.html",[0,2.089,1,1.751,5,0.227,6,2.246,17,0.029,40,1.441,42,1.215,44,1.751,47,1.751,49,1.751,54,0.312,67,0.017,68,0.017,111,1.219,113,2.246,121,1.751,122,2.246,135,1.215,153,1.582,163,1.501,183,2.246,186,1.321,189,0.826,197,1.582,198,1.962,203,1.441,223,2.246,226,5.483,265,1.751,266,2.246,271,1.582,275,2.246,276,1.441,278,2.246,279,2.839,281,2.246,282,2.246,311,2.246,347,2.246,350,1.962,352,2.246,359,1.962,370,1.751,371,2.246,389,1.582,394,1.441,415,2.246,448,2.246,453,1.751,455,3.248,476,2.246,493,2.246,518,1.962,519,1.962,520,2.676,521,2.676,522,2.676,523,4.983,524,4.983,525,2.246,526,4.547,527,1.962,528,6.021,529,2.246,530,1.751,531,1.962,532,3.248,533,2.246,534,2.246,535,3.87,536,2.676,537,2.676,538,2.676,539,2.676]],["title/dependencies.html",[72,1.662,540,2.322]],["body/dependencies.html",[17,0.03,39,0.559,54,0.216,67,0.02,68,0.02,72,1.446,89,2.529,94,2.039,97,2.529,157,2.529,159,2.256,168,2.039,196,2.894,201,2.529,320,4.371,358,2.894,450,2.894,451,2.894,472,2.256,541,3.448,542,3.448,543,5.208,544,3.448,545,3.448,546,3.448,547,3.448,548,3.876,549,3.448,550,3.448,551,3.448,552,3.448,553,3.448,554,3.448,555,2.894,556,3.448,557,2.894,558,3.448,559,3.448,560,3.448,561,3.448,562,2.894,563,3.448,564,3.448,565,3.448,566,3.448,567,3.448,568,3.448,569,3.448,570,3.448,571,3.448,572,2.894,573,3.448,574,3.448,575,3.448]],["title/miscellaneous/enumerations.html",[576,1.49,577,3.327]],["body/miscellaneous/enumerations.html",[7,1.075,17,0.027,51,3.339,67,0.025,68,0.025,576,2.552,577,3.977,578,4.738,579,4.738,580,5.648,581,4.741,582,5.648]],["title/miscellaneous/functions.html",[576,1.49,583,3.327]],["body/miscellaneous/functions.html",[7,1.12,17,0.025,67,0.025,68,0.025,533,4.141,534,5.152,576,2.657,583,4.141,584,4.934]],["title/interfaces/iConfig.html",[530,2.16,531,2.421]],["body/interfaces/iConfig.html",[3,0.376,4,0.334,5,0.293,7,0.786,17,0.029,28,1.796,37,0.503,53,0.376,67,0.02,68,0.02,173,3.887,175,3.887,189,1.792,257,2.266,330,3.887,422,3.827,456,2.738,468,2.54,527,3.397,529,2.906,530,2.266,531,3.397,585,3.463,586,4.383,587,5.808,588,4.874,589,4.676,590,4.632,591,3.463,592,3.463,593,3.463,594,3.463,595,3.463,596,3.463]],["title/index.html",[7,0.628,597,2.322,598,2.322]],["body/index.html",[4,0.199,5,0.33,17,0.029,37,0.224,57,1.111,67,0.014,68,0.014,83,1.631,100,1.731,101,2.673,168,1.219,189,0.636,228,1.731,245,2.673,301,1.731,472,2.084,518,1.512,519,1.512,555,1.731,557,1.731,572,1.731,586,2.336,599,3.266,600,1.731,601,1.731,602,2.673,603,1.731,604,3.185,605,1.731,606,3.185,607,2.062,608,2.062,609,2.062,610,2.062,611,2.062,612,1.731,613,2.062,614,2.062,615,2.062,616,1.512,617,2.062,618,2.062,619,2.062,620,2.062,621,2.062,622,2.062,623,2.062,624,2.062,625,2.062,626,2.062,627,2.062,628,2.062,629,2.062,630,2.062,631,2.062,632,2.062,633,3.891,634,2.062,635,2.062,636,2.062,637,2.062,638,2.062,639,2.062,640,2.062,641,3.891,642,2.062,643,2.062,644,2.062,645,2.062,646,2.062,647,2.062,648,2.062,649,3.185,650,2.062,651,2.062,652,2.062,653,2.062,654,2.062,655,2.062,656,3.185,657,2.062,658,2.062,659,2.062,660,1.731,661,2.062,662,2.062,663,2.062,664,2.062,665,2.062,666,2.062,667,2.062,668,2.062,669,2.062,670,3.185,671,5.212,672,2.062,673,3.185,674,4.196,675,2.062,676,2.062,677,3.185,678,2.062,679,2.062,680,2.062,681,3.185,682,3.185,683,2.062,684,2.062,685,2.062,686,2.062,687,2.062,688,2.062,689,1.731,690,2.062,691,3.185,692,3.891,693,2.062,694,3.185,695,2.062,696,2.062,697,2.062,698,3.185,699,2.062,700,3.891,701,3.185,702,3.185,703,3.185,704,2.673,705,3.185,706,3.185,707,3.185,708,2.062,709,2.062,710,2.062,711,2.062,712,2.062,713,2.062,714,2.062,715,2.062,716,2.062,717,3.185,718,2.062,719,2.062,720,2.084,721,2.062,722,2.062,723,2.062,724,1.512,725,2.062,726,2.062,727,2.062,728,2.336,729,1.512,730,2.062,731,2.062]],["title/license.html",[597,2.322,598,2.322,720,1.81]],["body/license.html",[17,0.02,67,0.02,68,0.02,83,1.377,443,2.758,519,2.41,548,2.758,660,3.752,720,2.15,724,2.41,728,2.41,729,2.41,732,5.081,733,3.286,734,3.286,735,4.471,736,3.286,737,3.286,738,3.286,739,3.286,740,3.286,741,3.286,742,6.213,743,3.286,744,3.286,745,3.286,746,5.081,747,3.286,748,4.471,749,3.286,750,3.286,751,4.471,752,3.286,753,3.286,754,3.286,755,3.286,756,3.286,757,3.286,758,3.286,759,4.471,760,3.286,761,3.286,762,3.286,763,3.286,764,3.286,765,3.286,766,3.286,767,4.471,768,4.471,769,3.286,770,3.286,771,3.286,772,3.286,773,3.286,774,3.286,775,3.286,776,3.286,777,3.286,778,3.286,779,3.286,780,3.286,781,3.286,782,3.286,783,3.286,784,3.286,785,3.286,786,3.286,787,3.286,788,3.286,789,3.286,790,3.286,791,3.286,792,3.286,793,3.286,794,3.286,795,3.286,796,3.286]],["title/modules.html",[71,1.739]],["body/modules.html",[17,0.023,67,0.023,68,0.023,70,2.785,71,1.65,76,2.516,77,2.516,78,2.516,79,2.516,80,2.292,152,2.292,797,6.315,798,6.315,799,6.315,800,6.404,801,4.256,802,4.256]],["title/overview.html",[803,3.764]],["body/overview.html",[2,1.024,17,0.029,40,2.431,42,2.571,67,0.017,68,0.017,70,4.093,71,1.024,72,1.608,73,2.217,74,2.217,75,2.217,76,3.635,77,3.109,78,2.669,79,3.428,80,3.049,81,1.893,82,1.304,83,1.108,112,1.108,135,2.571,148,2.217,149,2.217,150,2.217,151,2.217,152,3.233,153,2.669,186,2.794,269,2.217,270,2.217,271,2.669,277,1.729,341,2.217,342,2.217,343,2.217,350,1.938,394,3.049,409,2.217,411,2.217,412,2.217,454,1.938,487,2.217,488,2.217,489,2.217,530,1.729,803,2.217,804,2.642,805,3.835,806,4.514,807,2.642]],["title/properties.html",[456,2.344,540,2.322]],["body/properties.html",[17,0.028,67,0.024,68,0.024,316,3.867,456,2.724,562,3.867,599,3.867,600,3.867,601,3.867,602,3.867,603,3.867,612,3.867,720,3.015,724,3.379,728,3.379,729,3.379,808,4.608,809,4.608,810,4.608]],["title/miscellaneous/variables.html",[576,1.49,616,2.907]],["body/miscellaneous/variables.html",[7,0.746,17,0.029,28,1.274,49,3.733,51,1.942,67,0.02,68,0.02,171,3.851,189,1.38,239,2.15,257,2.15,335,2.758,359,3.279,454,2.41,468,3.727,525,2.758,527,3.279,532,2.758,576,1.77,581,4.265,586,2.41,588,2.758,589,2.758,605,2.758,616,2.41,674,2.758,689,2.758,704,2.758,811,3.286,812,4.471,813,3.286,814,3.286,815,3.286,816,3.286,817,3.286,818,3.286,819,3.286,820,3.286,821,5.454,822,4.471,823,5.454,824,4.471,825,3.286,826,3.286,827,3.286,828,3.286,829,3.286,830,3.286,831,3.286,832,3.286,833,3.286,834,3.286,835,3.286,836,3.286,837,3.286,838,3.286]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ContractsController.html":{},"modules/ContractsModule.html":{},"injectables/ContractsService.html":{},"classes/CreateTaskDto.html":{},"modules/FilesModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"interfaces/iConfig.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":554,"title":{},"body":{"dependencies.html":{}}}],["0.2.37",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":528,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":536,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":524,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":535,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":537,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":806,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":562,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["1.0.1",{"_index":549,"title":{},"body":{"dependencies.html":{}}}],["1.0.2",{"_index":544,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{},"interfaces/iConfig.html":{},"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":657,"title":{},"body":{"index.html":{}}}],["2.4.3",{"_index":553,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["201",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["2021",{"_index":734,"title":{},"body":{"license.html":{}}}],["2048",{"_index":694,"title":{},"body":{"index.html":{}}}],["22",{"_index":655,"title":{},"body":{"index.html":{}}}],["3.0.2",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":594,"title":{},"body":{"interfaces/iConfig.html":{}}}],["4",{"_index":805,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":560,"title":{},"body":{"dependencies.html":{}}}],["4.5.0",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":558,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["401",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["48",{"_index":653,"title":{},"body":{"index.html":{}}}],["5",{"_index":442,"title":{},"body":{"injectables/TasksService.html":{}}}],["5.1.4",{"_index":551,"title":{},"body":{"dependencies.html":{}}}],["5.4.3",{"_index":542,"title":{},"body":{"dependencies.html":{}}}],["5432",{"_index":816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["60s",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["7",{"_index":804,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":807,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":552,"title":{},"body":{"dependencies.html":{}}}],["8.1.1",{"_index":543,"title":{},"body":{"dependencies.html":{}}}],["8.7.1",{"_index":564,"title":{},"body":{"dependencies.html":{}}}],["above",{"_index":766,"title":{},"body":{"license.html":{}}}],["accept",{"_index":333,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["access_token",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":443,"title":{},"body":{"injectables/TasksService.html":{},"license.html":{}}}],["actions",{"_index":648,"title":{},"body":{"index.html":{}}}],["add",{"_index":299,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["adds",{"_index":444,"title":{},"body":{"injectables/TasksService.html":{}}}],["against",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["algorithm",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{}}}],["algorithms",{"_index":331,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["already",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["analyzes",{"_index":652,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":757,"title":{},"body":{"license.html":{}}}],["api",{"_index":626,"title":{},"body":{"index.html":{}}}],["app",{"_index":673,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":70,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":40,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arising",{"_index":794,"title":{},"body":{"license.html":{}}}],["associated",{"_index":743,"title":{},"body":{"license.html":{}}}],["async",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["attempt",{"_index":334,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["auth.guard.ts",{"_index":282,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:12",{"_index":288,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:18",{"_index":291,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:5",{"_index":285,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["auth/auth.module",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":43,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/strategy/jwt",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/strategy/roles.guard",{"_index":48,"title":{},"body":{"controllers/AppController.html":{}}}],["authcontroller",{"_index":121,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":301,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"index.html":{}}}],["authguard",{"_index":294,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":296,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":76,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":810,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":618,"title":{},"body":{"index.html":{}}}],["authors",{"_index":784,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":42,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["automatically",{"_index":827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["available",{"_index":802,"title":{},"body":{"modules.html":{}}}],["await",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["awk",{"_index":705,"title":{},"body":{"index.html":{}}}],["bash",{"_index":668,"title":{},"body":{"index.html":{}}}],["bcryptjs",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcryptjs.comparesync(user.password",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcryptjs.hashsync(body.password",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["block",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["body",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TasksController.html":{}}}],["body.email",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["body.name",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["boilerplate",{"_index":603,"title":{},"body":{"index.html":{},"properties.html":{}}}],["boolean",{"_index":357,"title":{},"body":{"guards/RolesGuard.html":{},"entities/User.html":{}}}],["bootstrap",{"_index":534,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["box",{"_index":607,"title":{},"body":{"index.html":{}}}],["browse",{"_index":800,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":797,"title":{},"body":{"modules.html":{}}}],["built",{"_index":609,"title":{},"body":{"index.html":{}}}],["c",{"_index":733,"title":{},"body":{"license.html":{}}}],["call",{"_index":305,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate",{"_index":283,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":286,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["casl/ability",{"_index":541,"title":{},"body":{"dependencies.html":{}}}],["catch",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["cbac",{"_index":620,"title":{},"body":{"index.html":{}}}],["certificate",{"_index":713,"title":{},"body":{"index.html":{}}}],["certificates",{"_index":690,"title":{},"body":{"index.html":{}}}],["charge",{"_index":739,"title":{},"body":{"license.html":{}}}],["check",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["checking",{"_index":613,"title":{},"body":{"index.html":{}}}],["claim",{"_index":787,"title":{},"body":{"license.html":{}}}],["class",{"_index":54,"title":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UsersDTO.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ContractsController.html":{},"modules/ContractsModule.html":{},"injectables/ContractsService.html":{},"classes/CreateTaskDto.html":{},"modules/FilesModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["class/interface",{"_index":507,"title":{},"body":{"injectables/UsersService.html":{}}}],["classes",{"_index":277,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UsersDTO.html":{},"overview.html":{}}}],["cli",{"_index":835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_contractsmodule",{"_index":269,"title":{},"body":{"modules/ContractsModule.html":{},"overview.html":{}}}],["cluster_contractsmodule_providers",{"_index":270,"title":{},"body":{"modules/ContractsModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":341,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":342,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_imports",{"_index":344,"title":{},"body":{"modules/LoggerModule.html":{}}}],["cluster_loggermodule_providers",{"_index":343,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":409,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_exports",{"_index":411,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_imports",{"_index":410,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_tasksmodule_providers",{"_index":412,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":487,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":488,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":489,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":641,"title":{},"body":{"index.html":{}}}],["codeql",{"_index":650,"title":{},"body":{"index.html":{}}}],["collection",{"_index":809,"title":{},"body":{"properties.html":{}}}],["column",{"_index":458,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":462,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":466,"title":{},"body":{"entities/User.html":{}}}],["commitlint",{"_index":643,"title":{},"body":{"index.html":{}}}],["commits",{"_index":646,"title":{},"body":{"index.html":{}}}],["compose",{"_index":627,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":765,"title":{},"body":{"license.html":{}}}],["config",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["configmodule",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice.get('database",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('keys.privatekey",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('keys.publickey",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["configuration",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["connection",{"_index":795,"title":{},"body":{"license.html":{}}}],["const",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectrepository(user",{"_index":509,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":312,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(logger",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["constructor(private",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["constructor(reflector",{"_index":353,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(usersrepository",{"_index":494,"title":{},"body":{"injectables/UsersService.html":{}}}],["container",{"_index":628,"title":{},"body":{"index.html":{}}}],["content",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":289,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":366,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":365,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":367,"title":{},"body":{"guards/RolesGuard.html":{}}}],["contract",{"_index":791,"title":{},"body":{"license.html":{}}}],["contracts",{"_index":267,"title":{},"body":{"controllers/ContractsController.html":{}}}],["contracts.controller",{"_index":273,"title":{},"body":{"modules/ContractsModule.html":{}}}],["contracts.service",{"_index":274,"title":{},"body":{"modules/ContractsModule.html":{}}}],["contracts/contracts.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["contractscontroller",{"_index":265,"title":{"controllers/ContractsController.html":{}},"body":{"controllers/ContractsController.html":{},"modules/ContractsModule.html":{},"coverage.html":{}}}],["contractsmodule",{"_index":77,"title":{"modules/ContractsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContractsModule.html":{},"modules.html":{},"overview.html":{}}}],["contractsservice",{"_index":271,"title":{"injectables/ContractsService.html":{}},"body":{"modules/ContractsModule.html":{},"injectables/ContractsService.html":{},"coverage.html":{},"overview.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ContractsController.html":{},"controllers/TasksController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ContractsController.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('contracts",{"_index":268,"title":{},"body":{"controllers/ContractsController.html":{}}}],["controller('tasks",{"_index":399,"title":{},"body":{"controllers/TasksController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ContractsController.html":{},"modules/ContractsModule.html":{},"modules/LoggerModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["conventional",{"_index":645,"title":{},"body":{"index.html":{}}}],["copied&pasted",{"_index":702,"title":{},"body":{"index.html":{}}}],["copies",{"_index":759,"title":{},"body":{"license.html":{}}}],["copy",{"_index":660,"title":{},"body":{"index.html":{},"license.html":{}}}],["copyright",{"_index":732,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":518,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":373,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":400,"title":{},"body":{"controllers/TasksController.html":{}}}],["create(createtaskdto",{"_index":378,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["create(createuserdto",{"_index":498,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtaskdto",{"_index":276,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":500,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.email",{"_index":512,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.name",{"_index":511,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.password",{"_index":513,"title":{},"body":{"injectables/UsersService.html":{}}}],["credentials",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["cron",{"_index":432,"title":{},"body":{"injectables/TasksService.html":{}}}],["cron(cronexpression.every_10_seconds",{"_index":424,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronexpression",{"_index":433,"title":{},"body":{"injectables/TasksService.html":{}}}],["current",{"_index":438,"title":{},"body":{"injectables/TasksService.html":{}}}],["custom",{"_index":300,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["custom.decorator",{"_index":50,"title":{},"body":{"controllers/AppController.html":{}}}],["damages",{"_index":788,"title":{},"body":{"license.html":{}}}],["database",{"_index":586,"title":{},"body":{"interfaces/iConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["dbconfig",{"_index":527,"title":{},"body":{"coverage.html":{},"interfaces/iConfig.html":{},"miscellaneous/variables.html":{}}}],["deal",{"_index":745,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":796,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"classes/UsersDTO.html":{}}}],["default",{"_index":468,"title":{},"body":{"entities/User.html":{},"interfaces/iConfig.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"classes/UsersDTO.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":393,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete(':id",{"_index":386,"title":{},"body":{"controllers/TasksController.html":{}}}],["dependencies",{"_index":72,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContractsModule.html":{},"modules/LoggerModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":316,"title":{},"body":{"injectables/JwtStrategy.html":{},"properties.html":{}}}],["development",{"_index":670,"title":{},"body":{"index.html":{}}}],["disable",{"_index":828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribute",{"_index":755,"title":{},"body":{"license.html":{}}}],["docker",{"_index":606,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":519,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["dotenv",{"_index":555,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["dropschema",{"_index":826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/create",{"_index":396,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":398,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["e2e",{"_index":683,"title":{},"body":{"index.html":{}}}],["echo",{"_index":63,"title":{},"body":{"controllers/AppController.html":{}}}],["echo')@useguards(jwtauthguard",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["email",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"classes/UsersDTO.html":{},"injectables/UsersService.html":{}}}],["endpoints",{"_index":634,"title":{},"body":{"index.html":{}}}],["endpoints.json",{"_index":687,"title":{},"body":{"index.html":{}}}],["enjoy",{"_index":688,"title":{},"body":{"index.html":{}}}],["entities",{"_index":454,"title":{},"body":{"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/user.entity",{"_index":492,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entitiesdir",{"_index":837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity",{"_index":453,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum",{"_index":467,"title":{},"body":{"entities/User.html":{}}}],["enumerations",{"_index":577,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/role.enum",{"_index":473,"title":{},"body":{"entities/User.html":{}}}],["environment",{"_index":615,"title":{},"body":{"index.html":{}}}],["err",{"_index":292,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["errors.length",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint",{"_index":635,"title":{},"body":{"index.html":{}}}],["establish",{"_index":307,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["event",{"_index":783,"title":{},"body":{"license.html":{}}}],["example",{"_index":304,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["excessive",{"_index":659,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":287,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["exists",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ContractsController.html":{},"modules/ContractsModule.html":{},"injectables/ContractsService.html":{},"classes/CreateTaskDto.html":{},"modules/FilesModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/iConfig.html":{}}}],["exports",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{},"modules/LoggerModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":548,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":295,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerService.html":{},"classes/UpdateTaskDto.html":{}}}],["extract",{"_index":709,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":318,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":326,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fails",{"_index":309,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["false",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["features",{"_index":610,"title":{},"body":{"index.html":{}}}],["fields",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ContractsController.html":{},"modules/ContractsModule.html":{},"injectables/ContractsService.html":{},"classes/CreateTaskDto.html":{},"modules/FilesModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"interfaces/iConfig.html":{},"index.html":{}}}],["files",{"_index":744,"title":{},"body":{"license.html":{}}}],["files/files.module",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["filesmodule",{"_index":78,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["findall",{"_index":374,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":375,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":403,"title":{},"body":{"controllers/TasksController.html":{}}}],["findone(email",{"_index":502,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(id",{"_index":381,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["fitness",{"_index":779,"title":{},"body":{"license.html":{}}}],["flag",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["flexible",{"_index":601,"title":{},"body":{"index.html":{},"properties.html":{}}}],["following",{"_index":764,"title":{},"body":{"license.html":{}}}],["formats",{"_index":656,"title":{},"body":{"index.html":{}}}],["formatter",{"_index":642,"title":{},"body":{"index.html":{}}}],["found",{"_index":338,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["free",{"_index":738,"title":{},"body":{"license.html":{}}}],["function",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["functions",{"_index":583,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":762,"title":{},"body":{"license.html":{}}}],["generate",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["genrsa",{"_index":699,"title":{},"body":{"index.html":{}}}],["get('/echo",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/health",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/premium",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["get(':id",{"_index":382,"title":{},"body":{"controllers/TasksController.html":{}}}],["getecho",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["getecho(@req",{"_index":61,"title":{},"body":{"controllers/AppController.html":{}}}],["getecho(req",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpremiumecho",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["getpremiumecho(@req",{"_index":66,"title":{},"body":{"controllers/AppController.html":{}}}],["getpremiumecho(req",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":597,"title":{"index.html":{},"license.html":{}},"body":{}}],["github",{"_index":647,"title":{},"body":{"index.html":{}}}],["given",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["goksu",{"_index":729,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["granted",{"_index":737,"title":{},"body":{"license.html":{}}}],["graph",{"_index":801,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":350,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":351,"title":{},"body":{"guards/RolesGuard.html":{}}}],["göksu",{"_index":731,"title":{},"body":{"index.html":{}}}],["handlecron",{"_index":416,"title":{},"body":{"injectables/TasksService.html":{}}}],["handleinterval",{"_index":417,"title":{},"body":{"injectables/TasksService.html":{}}}],["handlerequest",{"_index":284,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":290,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handletimeout",{"_index":418,"title":{},"body":{"injectables/TasksService.html":{}}}],["headers",{"_index":632,"title":{},"body":{"index.html":{}}}],["healthcheck",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["hello",{"_index":118,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":557,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["here",{"_index":303,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hereby",{"_index":736,"title":{},"body":{"license.html":{}}}],["holders",{"_index":785,"title":{},"body":{"license.html":{}}}],["host",{"_index":813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":631,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":322,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["httpexception('invalid",{"_index":339,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["httpstatus",{"_index":323,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["httpstatus.unauthorized",{"_index":340,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["iconfig",{"_index":531,"title":{"interfaces/iConfig.html":{}},"body":{"coverage.html":{},"interfaces/iConfig.html":{}}}],["id",{"_index":384,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":520,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":327,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":362,"title":{},"body":{"guards/RolesGuard.html":{}}}],["implied",{"_index":775,"title":{},"body":{"license.html":{}}}],["import",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ContractsController.html":{},"modules/ContractsModule.html":{},"injectables/ContractsService.html":{},"modules/FilesModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/iConfig.html":{},"index.html":{}}}],["imports",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoggerModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["included",{"_index":769,"title":{},"body":{"license.html":{}}}],["including",{"_index":748,"title":{},"body":{"license.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"classes/UsersDTO.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"interfaces/iConfig.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ContractsController.html":{},"modules/ContractsModule.html":{},"injectables/ContractsService.html":{},"classes/CreateTaskDto.html":{},"modules/FilesModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/iConfig.html":{}}}],["information",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["inject",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["injectable",{"_index":111,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ContractsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ContractsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":112,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ContractsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":505,"title":{},"body":{"injectables/UsersService.html":{}}}],["insomnia",{"_index":633,"title":{},"body":{"index.html":{}}}],["install",{"_index":686,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":672,"title":{},"body":{"index.html":{}}}],["interface",{"_index":530,"title":{"interfaces/iConfig.html":{}},"body":{"coverage.html":{},"interfaces/iConfig.html":{},"overview.html":{}}}],["interfaces",{"_index":585,"title":{},"body":{"interfaces/iConfig.html":{}}}],["interval",{"_index":434,"title":{},"body":{"injectables/TasksService.html":{}}}],["interval(10000",{"_index":426,"title":{},"body":{"injectables/TasksService.html":{}}}],["invalid",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["isactive",{"_index":457,"title":{},"body":{"entities/User.html":{}}}],["isemail",{"_index":483,"title":{},"body":{"classes/UsersDTO.html":{}}}],["isglobal",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":484,"title":{},"body":{"classes/UsersDTO.html":{}}}],["isnotempty()@isemail",{"_index":477,"title":{},"body":{"classes/UsersDTO.html":{}}}],["isnotempty()@isstring",{"_index":481,"title":{},"body":{"classes/UsersDTO.html":{}}}],["isok",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["isoptional",{"_index":485,"title":{},"body":{"classes/UsersDTO.html":{}}}],["isoptional()@isstring",{"_index":479,"title":{},"body":{"classes/UsersDTO.html":{}}}],["isstring",{"_index":486,"title":{},"body":{"classes/UsersDTO.html":{}}}],["issues",{"_index":665,"title":{},"body":{"index.html":{}}}],["isvalid",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["javascript",{"_index":637,"title":{},"body":{"index.html":{}}}],["joey",{"_index":728,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["join(__dirname",{"_index":821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json.stringify",{"_index":116,"title":{},"body":{"injectables/AppService.html":{}}}],["jwt",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["jwtauthguard",{"_index":44,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":325,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":153,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":692,"title":{},"body":{"index.html":{}}}],["key.pem",{"_index":697,"title":{},"body":{"index.html":{}}}],["keys",{"_index":587,"title":{},"body":{"interfaces/iConfig.html":{}}}],["kind",{"_index":774,"title":{},"body":{"license.html":{}}}],["languages",{"_index":654,"title":{},"body":{"index.html":{}}}],["latest",{"_index":611,"title":{},"body":{"index.html":{}}}],["liability",{"_index":789,"title":{},"body":{"license.html":{}}}],["liable",{"_index":786,"title":{},"body":{"license.html":{}}}],["license",{"_index":720,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["license.md",{"_index":726,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":722,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":749,"title":{},"body":{"license.html":{}}}],["limited",{"_index":776,"title":{},"body":{"license.html":{}}}],["lint",{"_index":644,"title":{},"body":{"index.html":{}}}],["linter",{"_index":638,"title":{},"body":{"index.html":{}}}],["literal",{"_index":590,"title":{},"body":{"interfaces/iConfig.html":{}}}],["load",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":561,"title":{},"body":{"dependencies.html":{}}}],["logger",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LoggerService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{}}}],["logger(authservice.name",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger(tasksservice.name",{"_index":436,"title":{},"body":{"injectables/TasksService.html":{}}}],["logger.service",{"_index":346,"title":{},"body":{"modules/LoggerModule.html":{}}}],["loggermodule",{"_index":152,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/LoggerModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["loggerservice",{"_index":186,"title":{"injectables/LoggerService.html":{}},"body":{"injectables/AuthService.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["logging",{"_index":833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logic",{"_index":302,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["login",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@req",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["made",{"_index":730,"title":{},"body":{"index.html":{}}}],["manually",{"_index":704,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["match",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ContractsController.html":{},"modules/ContractsModule.html":{},"injectables/ContractsService.html":{},"classes/CreateTaskDto.html":{},"modules/FilesModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"interfaces/iConfig.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["megalinter",{"_index":651,"title":{},"body":{"index.html":{}}}],["merchantability",{"_index":778,"title":{},"body":{"license.html":{}}}],["merge",{"_index":753,"title":{},"body":{"license.html":{}}}],["message",{"_index":117,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{}}}],["metadata",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["migration",{"_index":831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrations",{"_index":823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrations/**/*{.ts,.js",{"_index":834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationsdir",{"_index":836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationsrun",{"_index":832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":576,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mistakes",{"_index":663,"title":{},"body":{"index.html":{}}}],["mit",{"_index":724,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mode",{"_index":677,"title":{},"body":{"index.html":{}}}],["modify",{"_index":752,"title":{},"body":{"license.html":{}}}],["module",{"_index":69,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContractsModule.html":{},"modules/FilesModule.html":{},"modules/LoggerModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContractsModule.html":{},"modules/FilesModule.html":{},"modules/LoggerModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":71,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContractsModule.html":{},"modules/FilesModule.html":{},"modules/LoggerModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":727,"title":{},"body":{"index.html":{}}}],["msg",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["n",{"_index":330,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/iConfig.html":{}}}],["name",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"classes/UsersDTO.html":{},"injectables/UsersService.html":{}}}],["named",{"_index":696,"title":{},"body":{"index.html":{}}}],["needs",{"_index":701,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":602,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nestjs/common",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ContractsController.html":{},"modules/ContractsModule.html":{},"injectables/ContractsService.html":{},"modules/FilesModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":358,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":450,"title":{},"body":{"classes/UpdateTaskDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":550,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["nf",{"_index":706,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":782,"title":{},"body":{"license.html":{}}}],["notice",{"_index":767,"title":{},"body":{"license.html":{}}}],["npm",{"_index":671,"title":{},"body":{"index.html":{}}}],["null",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":422,"title":{},"body":{"injectables/TasksService.html":{},"entities/User.html":{},"interfaces/iConfig.html":{}}}],["obtaining",{"_index":741,"title":{},"body":{"license.html":{}}}],["once",{"_index":441,"title":{},"body":{"injectables/TasksService.html":{}}}],["open",{"_index":623,"title":{},"body":{"index.html":{}}}],["openssl",{"_index":698,"title":{},"body":{"index.html":{}}}],["opinionated",{"_index":640,"title":{},"body":{"index.html":{}}}],["optional",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UsersDTO.html":{},"injectables/UsersService.html":{}}}],["orchestration",{"_index":629,"title":{},"body":{"index.html":{}}}],["orm",{"_index":621,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":793,"title":{},"body":{"license.html":{}}}],["out",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContractsModule.html":{},"modules/LoggerModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["outform",{"_index":714,"title":{},"body":{"index.html":{}}}],["output",{"_index":695,"title":{},"body":{"index.html":{}}}],["overview",{"_index":803,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":540,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pair",{"_index":711,"title":{},"body":{"index.html":{}}}],["param",{"_index":332,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/TasksController.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["parseint(process.env.port",{"_index":593,"title":{},"body":{"interfaces/iConfig.html":{}}}],["parseint(process.env.postgres_port",{"_index":815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":592,"title":{},"body":{"interfaces/iConfig.html":{}}}],["partialtype",{"_index":449,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["partialtype(createtaskdto",{"_index":452,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["particular",{"_index":780,"title":{},"body":{"license.html":{}}}],["passport",{"_index":320,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":321,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":324,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passreqtocallback",{"_index":298,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["password",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"classes/UsersDTO.html":{},"miscellaneous/variables.html":{}}}],["pastes",{"_index":661,"title":{},"body":{"index.html":{}}}],["patch",{"_index":392,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch(':id",{"_index":390,"title":{},"body":{"controllers/TasksController.html":{}}}],["payload",{"_index":317,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pem",{"_index":715,"title":{},"body":{"index.html":{}}}],["permission",{"_index":735,"title":{},"body":{"license.html":{}}}],["permit",{"_index":760,"title":{},"body":{"license.html":{}}}],["person",{"_index":740,"title":{},"body":{"license.html":{}}}],["persons",{"_index":761,"title":{},"body":{"license.html":{}}}],["pg",{"_index":563,"title":{},"body":{"dependencies.html":{}}}],["pluggable",{"_index":636,"title":{},"body":{"index.html":{}}}],["port",{"_index":588,"title":{},"body":{"interfaces/iConfig.html":{},"miscellaneous/variables.html":{}}}],["portions",{"_index":771,"title":{},"body":{"license.html":{}}}],["post",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["post('login",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":605,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["postgresconnectionoptions",{"_index":589,"title":{},"body":{"interfaces/iConfig.html":{},"miscellaneous/variables.html":{}}}],["postgresql",{"_index":622,"title":{},"body":{"index.html":{}}}],["prefer",{"_index":829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContractsController.html":{},"controllers/TasksController.html":{}}}],["premium",{"_index":582,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["prettier",{"_index":639,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":460,"title":{},"body":{"entities/User.html":{}}}],["printf",{"_index":718,"title":{},"body":{"index.html":{}}}],["printf\"%s\\\\n\",$0",{"_index":708,"title":{},"body":{"index.html":{}}}],["private",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["private_key.pem",{"_index":700,"title":{},"body":{"index.html":{}}}],["privatekey",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/iConfig.html":{}}}],["process.env.postgres_db",{"_index":820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.postgres_host",{"_index":814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.postgres_password",{"_index":819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.postgres_user",{"_index":818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.private_key.replace(/\\\\\\\\n/gm",{"_index":329,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["process.env.private_key.replace(/\\\\n/gm",{"_index":595,"title":{},"body":{"interfaces/iConfig.html":{}}}],["process.env.public_key.replace(/\\\\n/gm",{"_index":596,"title":{},"body":{"interfaces/iConfig.html":{}}}],["production",{"_index":599,"title":{},"body":{"index.html":{},"properties.html":{}}}],["project",{"_index":721,"title":{},"body":{"index.html":{}}}],["promise",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":456,"title":{"properties.html":{}},"body":{"entities/User.html":{},"classes/UsersDTO.html":{},"interfaces/iConfig.html":{},"properties.html":{}}}],["property",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["provided",{"_index":772,"title":{},"body":{"license.html":{}}}],["providers",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContractsModule.html":{},"modules/LoggerModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":710,"title":{},"body":{"index.html":{}}}],["public_key.pem",{"_index":717,"title":{},"body":{"index.html":{}}}],["publickey",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/iConfig.html":{}}}],["publish",{"_index":754,"title":{},"body":{"license.html":{}}}],["pubout",{"_index":716,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":781,"title":{},"body":{"license.html":{}}}],["quick",{"_index":666,"title":{},"body":{"index.html":{}}}],["rbac",{"_index":619,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":600,"title":{},"body":{"index.html":{},"properties.html":{}}}],["real",{"_index":506,"title":{},"body":{"injectables/UsersService.html":{}}}],["refactor",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["reflect",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":354,"title":{},"body":{"guards/RolesGuard.html":{}}}],["register",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@req",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(body",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(req",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["relational",{"_index":624,"title":{},"body":{"index.html":{}}}],["remove",{"_index":376,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":407,"title":{},"body":{"controllers/TasksController.html":{}}}],["remove(id",{"_index":385,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["removes",{"_index":447,"title":{},"body":{"injectables/TasksService.html":{}}}],["repository",{"_index":495,"title":{},"body":{"injectables/UsersService.html":{}}}],["representing",{"_index":508,"title":{},"body":{"injectables/UsersService.html":{}}}],["req",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{}}}],["requiredroles",{"_index":363,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":368,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{}}}],["res.status(200).json(body",{"_index":62,"title":{},"body":{"controllers/AppController.html":{}}}],["res.status(auth.status).json(auth.content",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(auth.status).json(auth.msg",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContractsModule.html":{},"modules/LoggerModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["restriction",{"_index":747,"title":{},"body":{"license.html":{}}}],["results",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ContractsController.html":{},"modules/ContractsModule.html":{},"injectables/ContractsService.html":{},"classes/CreateTaskDto.html":{},"modules/FilesModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"interfaces/iConfig.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["rights",{"_index":750,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.standard",{"_index":475,"title":{},"body":{"entities/User.html":{}}}],["roles",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.premium",{"_index":65,"title":{},"body":{"controllers/AppController.html":{}}}],["roles_key",{"_index":359,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":47,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AppController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesguard)@roles(role.premium",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["rs256",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["rsa",{"_index":691,"title":{},"body":{"index.html":{}}}],["rsa256",{"_index":617,"title":{},"body":{"index.html":{}}}],["run",{"_index":674,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["running",{"_index":830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["s\\\\n\",$0",{"_index":719,"title":{},"body":{"index.html":{}}}],["saved",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["scanning",{"_index":649,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["scope",{"_index":348,"title":{},"body":{"injectables/LoggerService.html":{}}}],["scope.transient",{"_index":349,"title":{},"body":{"injectables/LoggerService.html":{}}}],["second",{"_index":439,"title":{},"body":{"injectables/TasksService.html":{}}}],["seconds",{"_index":440,"title":{},"body":{"injectables/TasksService.html":{}}}],["secretorkey",{"_index":328,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["secure",{"_index":630,"title":{},"body":{"index.html":{}}}],["security",{"_index":664,"title":{},"body":{"index.html":{}}}],["see",{"_index":725,"title":{},"body":{"index.html":{}}}],["sell",{"_index":758,"title":{},"body":{"license.html":{}}}],["service",{"_index":336,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["session",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{}}}],["set",{"_index":825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":667,"title":{},"body":{"index.html":{}}}],["setup.shinstallation",{"_index":669,"title":{},"body":{"index.html":{}}}],["shall",{"_index":768,"title":{},"body":{"license.html":{}}}],["signoptions",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["single",{"_index":625,"title":{},"body":{"index.html":{}}}],["size",{"_index":693,"title":{},"body":{"index.html":{}}}],["software",{"_index":742,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":608,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ContractsController.html":{},"modules/ContractsModule.html":{},"injectables/ContractsService.html":{},"classes/CreateTaskDto.html":{},"modules/FilesModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"classes/UsersDTO.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/iConfig.html":{},"index.html":{}}}],["spelling",{"_index":662,"title":{},"body":{"index.html":{}}}],["src/.../custom.decorator.ts",{"_index":812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.ts",{"_index":811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":584,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.enum.ts",{"_index":578,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:19",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:24",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:31",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":113,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:11",{"_index":115,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:5",{"_index":114,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:10",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:17",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:65",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/strategy/jwt",{"_index":281,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt.strategy.ts",{"_index":311,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt.strategy.ts:24",{"_index":315,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/jwt.strategy.ts:9",{"_index":313,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/roles.guard.ts",{"_index":352,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/strategy/roles.guard.ts:10",{"_index":356,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/strategy/roles.guard.ts:7",{"_index":355,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/config/database.ts",{"_index":525,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/index.ts",{"_index":529,"title":{},"body":{"coverage.html":{},"interfaces/iConfig.html":{}}}],["src/contracts/contracts.controller.ts",{"_index":266,"title":{},"body":{"controllers/ContractsController.html":{},"coverage.html":{}}}],["src/contracts/contracts.module.ts",{"_index":272,"title":{},"body":{"modules/ContractsModule.html":{}}}],["src/contracts/contracts.service.ts",{"_index":275,"title":{},"body":{"injectables/ContractsService.html":{},"coverage.html":{}}}],["src/custom.decorator",{"_index":360,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/custom.decorator.ts",{"_index":532,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/files/files.module.ts",{"_index":280,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/logger/logger.module",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{}}}],["src/logger/logger.module.ts",{"_index":345,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logger.service",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["src/logger/logger.service.ts",{"_index":347,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":533,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/tasks/dto/create",{"_index":278,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["src/tasks/dto/update",{"_index":448,"title":{},"body":{"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["src/tasks/tasks.controller.ts",{"_index":371,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/tasks/tasks.controller.ts:11",{"_index":379,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:16",{"_index":380,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:21",{"_index":383,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:26",{"_index":391,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:31",{"_index":387,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.module.ts",{"_index":413,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/tasks/tasks.service.ts",{"_index":415,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/tasks/tasks.service.ts:12",{"_index":425,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:17",{"_index":427,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:22",{"_index":429,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:26",{"_index":420,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:30",{"_index":421,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:35",{"_index":423,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:39",{"_index":431,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:43",{"_index":430,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:8",{"_index":419,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/users/dto/create",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"classes/UsersDTO.html":{},"coverage.html":{}}}],["src/users/entities/user.entity",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["src/users/entities/user.entity.ts",{"_index":455,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:11",{"_index":464,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:14",{"_index":459,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:17",{"_index":465,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:20",{"_index":463,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:27",{"_index":470,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:8",{"_index":461,"title":{},"body":{"entities/User.html":{}}}],["src/users/enums/role.enum",{"_index":361,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/users/enums/role.enum.ts",{"_index":579,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/users.module",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":490,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["src/users/users.service.ts",{"_index":493,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":496,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:14",{"_index":499,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:24",{"_index":501,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":503,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:34",{"_index":504,"title":{},"body":{"injectables/UsersService.html":{}}}],["ssl",{"_index":689,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["standard",{"_index":580,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["start",{"_index":675,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":678,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":679,"title":{},"body":{"index.html":{}}}],["started",{"_index":598,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["strategy",{"_index":319,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategy/jwt.strategy",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/JwtStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"classes/UsersDTO.html":{},"injectables/UsersService.html":{},"interfaces/iConfig.html":{},"miscellaneous/variables.html":{}}}],["sub(/\\r",{"_index":707,"title":{},"body":{"index.html":{}}}],["subject",{"_index":763,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":756,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":770,"title":{},"body":{"license.html":{}}}],["success",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":297,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":308,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super.login(request",{"_index":306,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":798,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":614,"title":{},"body":{"index.html":{}}}],["svg",{"_index":799,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":572,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["synchronize",{"_index":824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":539,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":538,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":445,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.dto",{"_index":397,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{}}}],["task.dto.ts",{"_index":279,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["tasks",{"_index":372,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["tasks.controller",{"_index":414,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":395,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["tasks/tasks.module",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["taskscontroller",{"_index":370,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["tasksmodule",{"_index":79,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":394,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["terminal",{"_index":703,"title":{},"body":{"index.html":{}}}],["test",{"_index":682,"title":{},"body":{"index.html":{}}}],["test:covendpoints",{"_index":685,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":684,"title":{},"body":{"index.html":{}}}],["tests",{"_index":681,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":59,"title":{},"body":{"controllers/AppController.html":{}}}],["this.appservice.healthcheck",{"_index":60,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(body",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(body",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.sign",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.debug('called",{"_index":437,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.logger.debug(`${errors",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.debug(error.message",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":364,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.tasksservice.create(createtaskdto",{"_index":401,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.findall",{"_index":402,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.findone(+id",{"_index":404,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.remove(+id",{"_index":408,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.update(+id",{"_index":406,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.userservice.create(userdto).catch((error",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findone(payload.email",{"_index":337,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.findone(user.email",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.delete(id",{"_index":517,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.find",{"_index":515,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":516,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":514,"title":{},"body":{"injectables/UsersService.html":{}}}],["throw",{"_index":310,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["timeout",{"_index":435,"title":{},"body":{"injectables/TasksService.html":{}}}],["timeout(5000",{"_index":428,"title":{},"body":{"injectables/TasksService.html":{}}}],["todo",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["token",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["tooling",{"_index":658,"title":{},"body":{"index.html":{}}}],["tort",{"_index":792,"title":{},"body":{"license.html":{}}}],["transform",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["true",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"entities/User.html":{}}}],["try",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["type",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"classes/UsersDTO.html":{},"injectables/UsersService.html":{},"coverage.html":{},"interfaces/iConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":472,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeorm/driver/postgres/postgresconnectionoptions",{"_index":591,"title":{},"body":{"interfaces/iConfig.html":{}}}],["typeormmodule",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":451,"title":{},"body":{"classes/UpdateTaskDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":604,"title":{},"body":{"index.html":{}}}],["ui",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["ultimate",{"_index":808,"title":{},"body":{"properties.html":{}}}],["unauthorizedexception",{"_index":293,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["undefined",{"_index":469,"title":{},"body":{"entities/User.html":{}}}],["under",{"_index":723,"title":{},"body":{"index.html":{}}}],["unique",{"_index":471,"title":{},"body":{"entities/User.html":{}}}],["unique(['email",{"_index":474,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":680,"title":{},"body":{"index.html":{}}}],["up",{"_index":120,"title":{},"body":{"injectables/AppService.html":{}}}],["update",{"_index":377,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["update(@param('id",{"_index":405,"title":{},"body":{"controllers/TasksController.html":{}}}],["update(id",{"_index":388,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updates",{"_index":446,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatetaskdto",{"_index":389,"title":{"classes/UpdateTaskDto.html":{}},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["use",{"_index":751,"title":{},"body":{"license.html":{}}}],["used",{"_index":712,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard",{"_index":64,"title":{},"body":{"controllers/AppController.html":{}}}],["user",{"_index":163,"title":{"entities/User.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":476,"title":{},"body":{"classes/UsersDTO.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":480,"title":{},"body":{"classes/UsersDTO.html":{}}}],["user.dto.ts:14",{"_index":482,"title":{},"body":{"classes/UsersDTO.html":{}}}],["user.dto.ts:6",{"_index":478,"title":{},"body":{"classes/UsersDTO.html":{}}}],["user.email",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.name",{"_index":510,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.password",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.roles?.includes(role",{"_index":369,"title":{},"body":{"guards/RolesGuard.html":{}}}],["userdetails",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdetails.password",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdto",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdto.email",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdto.name",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdto.password",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["username",{"_index":817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users.service",{"_index":491,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/enums/role.enum",{"_index":52,"title":{},"body":{"controllers/AppController.html":{}}}],["users/users.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["usersdto",{"_index":197,"title":{"classes/UsersDTO.html":{}},"body":{"injectables/AuthService.html":{},"classes/UsersDTO.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userservice",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["usersmodule",{"_index":80,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":497,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":135,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":335,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":314,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(userdto).then((errors",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"classes/UsersDTO.html":{},"dependencies.html":{}}}],["value",{"_index":581,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":526,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":616,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":612,"title":{},"body":{"index.html":{},"properties.html":{}}}],["void",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/TasksService.html":{}}}],["warranties",{"_index":777,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":773,"title":{},"body":{"license.html":{}}}],["watch",{"_index":676,"title":{},"body":{"index.html":{}}}],["whether",{"_index":790,"title":{},"body":{"license.html":{}}}],["without",{"_index":746,"title":{},"body":{"license.html":{}}}],["world",{"_index":119,"title":{},"body":{"injectables/AppService.html":{}}}],["zoom",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContractsModule.html":{},"modules/LoggerModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getEcho\n                            \n                            \n                                getHello\n                            \n                            \n                                getPremiumEcho\n                            \n                            \n                                healthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getEcho\n                        \n                    \n                \n            \n            \n                \ngetEcho(req, res, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/echo')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPremiumEcho\n                        \n                    \n                \n            \n            \n                \ngetPremiumEcho(req, res, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/premium-echo')@UseGuards(JwtAuthGuard, RolesGuard)@Roles(Role.premium)\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/health-check')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Req, Res, UseGuards } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { AuthService } from './auth/auth.service';\nimport { JwtAuthGuard } from './auth/strategy/jwt-auth.guard';\nimport { RolesGuard } from './auth/strategy/roles.guard';\nimport { Roles } from './custom.decorator';\nimport { Role } from './users/enums/role.enum';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService, private authService: AuthService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('/health-check')\n  healthCheck(): string {\n    return this.appService.healthCheck();\n  }\n\n  @Get('/echo')\n  getEcho(@Req() req, @Res() res, @Body() body) {\n    res.status(200).json(body);\n  }\n\n  @Get('/premium-echo')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.premium)\n  getPremiumEcho(@Req() req, @Res() res, @Body() body) {\n    res.status(200).json(body);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nContractsModule\n\nContractsModule\n\nAppModule -->\n\nContractsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ContractsModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { TasksModule } from './tasks/tasks.module';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { FilesModule } from './files/files.module';\nimport { ContractsModule } from './contracts/contracts.module';\nimport configuration from './config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [configuration],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => configService.get('database'),\n      inject: [ConfigService],\n    }),\n    ScheduleModule.forRoot(),\n    AuthModule,\n    UsersModule,\n    TasksModule,\n    FilesModule,\n    ContractsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                            \n                                healthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \nhealthCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable, Req, Res } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return JSON.stringify({\n      message: 'Hello World!',\n    });\n  }\n\n  healthCheck(): string {\n    return JSON.stringify({\n      message: 'up',\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req, res, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(req, res, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, Res } from '@nestjs/common';\nimport { UsersService } from 'src/users/users.service';\nimport { AuthService } from './auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService, private userService: UsersService) {}\n\n  @Post('login')\n  async login(@Req() req, @Res() res, @Body() body) {\n    const auth = await this.authService.login(body);\n    res.status(auth.status).json(auth.msg);\n  }\n\n  @Post('register')\n  async register(@Req() req, @Res() res, @Body() body) {\n    const auth = await this.authService.register(body);\n    res.status(auth.status).json(auth.content);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nLoggerModule\n\nLoggerModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nLoggerModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            LoggerModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './strategy/jwt.strategy';\nimport { AuthController } from './auth.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from 'src/users/entities/user.entity';\nimport { LoggerModule } from 'src/logger/logger.module';\n\n@Module({\n  imports: [\n    LoggerModule,\n    PassportModule.register({ defaultStrategy: 'jwt', property: 'user', session: false }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        privateKey: configService.get('keys.privateKey'),\n        publicKey: configService.get('keys.publicKey'),\n        signOptions: { expiresIn: '60s', algorithm: 'RS256' },\n      }),\n      inject: [ConfigService],\n    }),\n    UsersModule,\n    TypeOrmModule.forFeature([User]),\n  ],\n  providers: [AuthService, JwtStrategy],\n  exports: [AuthService, JwtModule, PassportModule],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService, jwtService: JwtService, userservice: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userservice\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport bcryptjs from 'bcryptjs';\nimport { UsersDTO } from 'src/users/dto/create-user.dto';\nimport { validate } from 'class-validator';\nimport { LoggerService } from 'src/logger/logger.service';\nimport { UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly logger: LoggerService = new Logger(AuthService.name),\n    private jwtService: JwtService,\n    private userservice: UsersService,\n  ) {}\n\n  async login(user: any): Promise> {\n    // Validation Flag\n    let isOk = false;\n\n    // Transform body into DTO\n    const userDTO = new UsersDTO();\n    userDTO.email = user.email;\n    userDTO.password = user.password;\n\n    // TODO: Refactor this section with try catch block and return error message in the catch block\n    // Validate DTO against validate function from class-validator\n    await validate(userDTO).then((errors) => {\n      if (errors.length > 0) {\n        this.logger.debug(`${errors}`);\n      } else {\n        isOk = true;\n      }\n    });\n\n    if (isOk) {\n      // Get user information\n      const userDetails = await this.userservice.findOne(user.email);\n\n      // Check if user exists\n      if (userDetails == null) {\n        return { status: 401, msg: { msg: 'Invalid credentials' } };\n      }\n\n      // Check if the given password match with saved password\n      const isValid = bcryptjs.compareSync(user.password, userDetails.password);\n      if (isValid) {\n        // Generate JWT token\n        return {\n          status: 200,\n          msg: {\n            email: user.email,\n            access_token: this.jwtService.sign({ email: user.email }),\n          },\n        };\n      } else {\n        // Password or email does not match\n        return { status: 401, msg: { msg: 'Invalid credentials' } };\n      }\n    } else {\n      return { status: 400, msg: { msg: 'Invalid fields.' } };\n    }\n  }\n\n  async register(body: any): Promise> {\n    // Validation Flag\n    let isOk = false;\n\n    // Transform body into DTO\n    const userDTO = new UsersDTO();\n    userDTO.email = body.email;\n    userDTO.name = body.name;\n    userDTO.password = bcryptjs.hashSync(body.password, 10);\n\n    // Validate DTO against validate function from class-validator\n    await validate(userDTO).then((errors) => {\n      if (errors.length > 0) {\n        this.logger.debug(`${errors}`);\n      } else {\n        isOk = true;\n      }\n    });\n    if (isOk) {\n      await this.userservice.create(userDTO).catch((error) => {\n        this.logger.debug(error.message);\n        isOk = false;\n      });\n      if (isOk) {\n        return { status: 201, content: { msg: 'User created with success' } };\n      } else {\n        return { status: 400, content: { msg: 'User already exists' } };\n      }\n    } else {\n      return { status: 400, content: { msg: 'Invalid content' } };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContractsController.html":{"url":"controllers/ContractsController.html","title":"controller - ContractsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContractsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contracts/contracts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                contracts\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('contracts')\nexport class ContractsController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContractsModule.html":{"url":"modules/ContractsModule.html","title":"module - ContractsModule","body":"\n                   \n\n\n\n\n    Modules\n    ContractsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContractsModule\n\n\n\ncluster_ContractsModule_providers\n\n\n\n\nContractsService\n\nContractsService\n\n\n\nContractsModule\n\nContractsModule\n\nContractsModule -->\n\nContractsService->ContractsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contracts/contracts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContractsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ContractsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ContractsController } from './contracts.controller';\nimport { ContractsService } from './contracts.service';\n\n@Module({\n  controllers: [ContractsController],\n  providers: [ContractsService],\n})\nexport class ContractsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContractsService.html":{"url":"injectables/ContractsService.html","title":"injectable - ContractsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContractsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contracts/contracts.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ContractsService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/create-task.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateTaskDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\n@Module({})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/jwt-auth.guard.ts:5\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/jwt-auth.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/jwt-auth.guard.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor() {\n    super({\n      passReqToCallback: true,\n    });\n  }\n\n  canActivate(context: ExecutionContext) {\n    // Add your custom authentication logic here\n    // for example, call super.logIn(request) to establish a session.\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user, info) {\n    // If authentication fails, we throw an UnauthorizedException so that\n    if (err || !user) {\n      throw err || new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userservice: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userservice\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/jwt.strategy.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        User\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { User } from 'src/users/entities/user.entity';\nimport { AuthService } from '../auth.service';\nimport { UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService, private userservice: UsersService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: `${process.env.PRIVATE_KEY.replace(/\\\\\\\\n/gm, '\\\\n')}`,\n      algorithms: ['RS256'],\n    });\n  }\n\n  /**\n   * @description Validate the token and return the user\n   * @param payload string\n   * @returns User\n   */\n  async validate(payload: any): Promise {\n    // Accept the JWT and attempt to validate it using the user service\n    const user = await this.userservice.findOne(payload.email);\n\n    // If the user is not found, throw an error\n    if (!user) {\n      throw new HttpException('Invalid token', HttpStatus.UNAUTHORIZED);\n    }\n\n    // If the user is found, return the user\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_LoggerModule_imports\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nLoggerModule -->\n\nLoggerModule->LoggerModule\n\n\n\n\n\nLoggerService \n\nLoggerService \n\nLoggerService  -->\n\nLoggerModule->LoggerService \n\n\n\n\n\nLoggerService\n\nLoggerService\n\nLoggerModule -->\n\nLoggerService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LoggerService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            LoggerModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LoggerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LoggerService } from './logger.service';\n\n@Module({\n  imports: [LoggerModule],\n  controllers: [],\n  providers: [LoggerService],\n  exports: [LoggerService],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Logger\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable, Scope, Logger } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class LoggerService extends Logger {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/strategy/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/roles.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/roles.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, Logger } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from 'src/custom.decorator';\nimport { Role } from 'src/users/enums/role.enum';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [context.getHandler(), context.getClass()]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n\n    return requiredRoles.some((role) => user.roles?.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createTaskDto: CreateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateTaskDto: UpdateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskDto\n                                    \n                                                UpdateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\n\n@Controller('tasks')\nexport class TasksController {\n  constructor(private readonly tasksService: TasksService) {}\n\n  @Post()\n  create(@Body() createTaskDto: CreateTaskDto) {\n    return this.tasksService.create(createTaskDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.tasksService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.tasksService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateTaskDto: UpdateTaskDto) {\n    return this.tasksService.update(+id, updateTaskDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.tasksService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_imports\n\n\n\ncluster_TasksModule_exports\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nLoggerModule\n\nLoggerModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nLoggerModule->TasksModule\n\n\n\n\n\nTasksService \n\nTasksService \n\nTasksService  -->\n\nTasksModule->TasksService \n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            LoggerModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TasksService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { TasksController } from './tasks.controller';\nimport { LoggerModule } from 'src/logger/logger.module';\n\n@Module({\n  imports: [LoggerModule],\n  controllers: [TasksController],\n  providers: [TasksService],\n  exports: [TasksService],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                handleCron\n                            \n                            \n                                handleInterval\n                            \n                            \n                                handleTimeout\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/tasks.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createTaskDto: CreateTaskDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleCron\n                        \n                    \n                \n            \n            \n                \nhandleCron()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_10_SECONDS)\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleInterval\n                        \n                    \n                \n            \n            \n                \nhandleInterval()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Interval(10000)\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleTimeout\n                        \n                    \n                \n            \n            \n                \nhandleTimeout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Timeout(5000)\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateTaskDto: UpdateTaskDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskDto\n                                    \n                                                UpdateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Cron, CronExpression, Interval, Timeout } from '@nestjs/schedule';\nimport { LoggerService } from 'src/logger/logger.service';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\n\n@Injectable()\nexport class TasksService {\n  constructor(private readonly logger: LoggerService = new Logger(TasksService.name)) {}\n\n  @Cron(CronExpression.EVERY_10_SECONDS)\n  handleCron() {\n    this.logger.debug('Called when the current second is 10');\n  }\n\n  @Interval(10000)\n  handleInterval() {\n    this.logger.debug('Called every 10 seconds');\n  }\n\n  @Timeout(5000)\n  handleTimeout() {\n    this.logger.debug('Called once after 5 seconds');\n  }\n\n  create(createTaskDto: CreateTaskDto) {\n    return 'This action adds a new task';\n  }\n\n  findAll() {\n    // return `This action returns all tasks`;\n    return 'This action returns all tasks';\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} task`;\n  }\n\n  update(id: number, updateTaskDto: UpdateTaskDto) {\n    return `This action updates a #${id} task`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} task`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskDto.html":{"url":"classes/UpdateTaskDto.html","title":"class - UpdateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/update-task.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateTaskDto } from './create-task.dto';\n\nexport class UpdateTaskDto extends PartialType(CreateTaskDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                isActive\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Role, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn, Unique } from 'typeorm';\nimport { Role } from '../enums/role.enum';\n\n@Entity()\n@Unique(['email'])\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  email: string;\n\n  @Column()\n  password: string;\n\n  @Column({ default: true })\n  isActive: boolean;\n\n  @Column({\n    type: 'enum',\n    enum: Role,\n    default: Role.standard,\n  })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersDTO.html":{"url":"classes/UsersDTO.html","title":"class - UsersDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class UsersDTO {\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: UsersDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                UsersDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { UsersDTO } from './dto/create-user.dto';\nimport { User } from './entities/user.entity';\n\n// This should be a real class/interface representing a user entity\n// export type User = any;\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectRepository(User) private readonly usersRepository: Repository) {}\n\n  create(createUserDto: UsersDTO): Promise {\n    const user = new User();\n\n    user.name = createUserDto.name;\n    user.email = createUserDto.email;\n    user.password = createUserDto.password;\n\n    return this.usersRepository.save(user);\n  }\n\n  async findAll(): Promise {\n    return this.usersRepository.find();\n  }\n\n  findOne(email: string): Promise {\n    return this.usersRepository.findOne({\n      email,\n    });\n  }\n\n  async remove(id: string): Promise {\n    await this.usersRepository.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/strategy/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config/database.ts\n            \n            variable\n            dbConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/index.ts\n            \n            interface\n            iConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/contracts/contracts.controller.ts\n            \n            controller\n            ContractsController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contracts/contracts.service.ts\n            \n            injectable\n            ContractsService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/custom.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/custom.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/dto/update-task.dto.ts\n            \n            class\n            UpdateTaskDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            UsersDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @casl/ability : ^5.4.3\n        \n            @nestjs/common : ^8.1.1\n        \n            @nestjs/config : ^1.0.2\n        \n            @nestjs/core : ^8.1.1\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.1.1\n        \n            @nestjs/schedule : ^1.0.1\n        \n            @nestjs/swagger : ^5.1.4\n        \n            @nestjs/typeorm : ^8.0.2\n        \n            bcryptjs : ^2.4.3\n        \n            class-validator : ^0.13.1\n        \n            dotenv : ^10.0.0\n        \n            helmet : ^4.6.0\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.7.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.5.0\n        \n            typeorm : ^0.2.37\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/enums/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 standard\n                            \n                        \n                        \n                            \n                                Value : standard\n                            \n                        \n                        \n                            \n                                 premium\n                            \n                        \n                        \n                            \n                                Value : premium\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/iConfig.html":{"url":"interfaces/iConfig.html","title":"interface - iConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  iConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            database\n                                        \n                                \n                                \n                                        \n                                            keys\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        database\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        database:     PostgresConnectionOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PostgresConnectionOptions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        keys\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keys:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PostgresConnectionOptions } from 'typeorm/driver/postgres/PostgresConnectionOptions';\nimport { dbConfig } from './database';\n\ninterface iConfig {\n  port: number;\n  database: PostgresConnectionOptions;\n  keys: {\n    privateKey: string;\n    publicKey: string;\n  };\n}\n\nexport default (): Partial => ({\n  port: parseInt(process.env.PORT, 10) || 3000,\n  keys: {\n    privateKey: process.env.PRIVATE_KEY.replace(/\\\\n/gm, '\\n'),\n    publicKey: process.env.PUBLIC_KEY.replace(/\\\\n/gm, '\\n'),\n  },\n  database: dbConfig(),\n});\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nProduction-ready and flexible NestJS Boilerplate with Typescript 🌃, Postgres 👾, TypeORM 🥷 and Docker 🐳.\nOut-of-box Solutions\nBuilt-in Features\n\n📱 NestJS — latest version\n🎉 TypeScript - Type checking\n⚙️ Dotenv - Supports environment variables\n🗝 Authentication - JWT, RSA256\n🏬 Authorization - RBAC, CBAC\n🏪 TypeORM - Database ORM\n🏪 PostgreSQL - Open-Source Relational Database\n🧠 Configuration - Single config for all\n📃 Swagger - API Documentation\n🐳 Docker Compose - Container Orchestration\n🔐 Helmet - secure HTTP headers\n😴 Insomnia - Insomnia config for endpoints\n📏 ESLint — Pluggable JavaScript linter\n💖 Prettier - Opinionated Code Formatter\n✨ Commitlint - Lint your conventional commits\n\nGitHub actions\n\n🕵️‍♂️ Code Scanning - Code scanning with CodeQL\n🕵️‍♂️ Megalinter - analyzes 48 languages, 22 formats, 19 tooling formats, excessive copy-pastes, spelling mistakes and security issues\n\nQuick Setup (Production)\nbash ./setup.shInstallation (Development)\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covEndpoints\n\nInstall the insomnia app\nImport the endpoints.json file\nEnjoy\n\nGenerate SSL certificates\n\nGenerate an RSA private key, of size 2048, and output it to a file named key.pem:\n\nopenssl genrsa -out private_key.pem 2048# It needs be copied&pasted from terminal manually\nawk 'NF {sub(/\\r/, \"\"); printf\"%s\\\\n\",$0;}' private_key.pem\nExtract the public key from the key pair, which can be used in a certificate:\n\nopenssl rsa -in private_key.pem -outform PEM -pubout -out public_key.pem# It needs be copied&pasted from terminal manually\nawk 'NF {sub(/\\r/, \"\"); printf \"%s\\\\n\",$0;}' public_key.pem📝 License\nThis project is licensed under the MIT License - see the LICENSE.md file for more information.\n\n\n\n\n\n\n  \n    Joey Goksu\n    📖\n    \n\n\n\n\nMade with ♥ by Joey Göksu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 Joey Goksu\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContractsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ContractsModule\n\n\n\ncluster_ContractsModule_providers\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_exports\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nContractsModule\n\nContractsModule\n\nAppModule -->\n\nContractsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nTasksService \n\nTasksService \n\nTasksService  -->\n\nTasksModule->TasksService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAuthModule -->\n\nLoggerModule->AuthModule\n\n\n\nTasksModule -->\n\nLoggerModule->TasksModule\n\n\n\nLoggerModule -->\n\nLoggerModule->LoggerModule\n\n\n\n\n\nLoggerService \n\nLoggerService \n\nLoggerService  -->\n\nLoggerModule->LoggerService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nContractsService\n\nContractsService\n\nContractsModule -->\n\nContractsService->ContractsModule\n\n\n\n\n\nLoggerService\n\nLoggerService\n\nLoggerModule -->\n\nLoggerService->LoggerModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : The ultimate collection of production-ready and flexible NestJS Boilerplate.\n        \n            License : MIT\n        \n            Author : Joey Goksu\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            dbConfig   (src/.../database.ts)\n                        \n                        \n                            Roles   (src/.../custom.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../custom.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dbConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): PostgresConnectionOptions => ({\n  type: 'postgres',\n  host: process.env.POSTGRES_HOST,\n  port: parseInt(process.env.POSTGRES_PORT, 10) || 5432,\n  username: process.env.POSTGRES_USER,\n  password: process.env.POSTGRES_PASSWORD,\n  database: process.env.POSTGRES_DB,\n  ssl: false,\n  entities: [join(__dirname, '../**/*.entity{.ts,.js}')],\n  // We are using migrations, synchronize should be set to false.\n  synchronize: false,\n  dropSchema: false,\n  // Run migrations automatically,\n  // you can disable this if you prefer running migration manually.\n  migrationsRun: false,\n  logging: false,\n  migrations: [join(__dirname, '../migrations/**/*{.ts,.js}')],\n  cli: {\n    migrationsDir: join(__dirname, '../migrations'),\n    entitiesDir: join(__dirname, '../**/*.entity{.ts,.js}'),\n  },\n})\n                    \n                \n\n\n        \n    \n\n    src/custom.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
